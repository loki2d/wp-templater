var fs = require('fs');
var prompt = require('prompt');

// var pageName = process.env.npm_config_name || 'page';
var pageName,
    template = 'default';

var pathRoot  = "./frontend/";
var pathTemplate = pathRoot+"layouts/";
var pathLayout = pathRoot+"routes/";
var pathTemplateCfg = pathRoot+"templates/";


var templateConfig = getConfig(pathTemplateCfg+template+".json");

var pathToJsFile;

var pathToJadeFile = pathTemplate+pageName + ".jade";

  prompt.start();

  prompt.get({properties: {name:{description: "Введите имя страницы"}}}, function(err, result) {

    if(result.name){
      pageName = result.name;
      setFilePath();
    }

    prompt.get({properties: {template:{description: "Введите имя шаблона(default)"}}}, function(err, result) {

      template = result.template || 'default';

      if (!fileExist(pathLayout+pageName+".js")){
        generateTemplate();
      }else{
        // console.log("Файл с таким именем уже существует перезаписать темплейт(N)");
        prompt.get({properties: {rewrite:{description: "Файл с таким именем уже существует перезаписать шаблон (y/N)"}}}, function(err, result) {
          if(result.rewrite === "y" || result.rewrite === "Y"){
            generateTemplate(template);
          }else{
            console.log("Тогда запусти команду еще раз и попробуй выбрать другое имя :|");
          }
        });
      }

    });


  });


function generateTemplate() {
  var js = fs.writeFile(pathLayout+pageName+".js", '//generated by makepage.js', 'utf8', fileCreated);
  if (template){
    var templateConfig = getConfig(pathTemplateCfg+template+".json");
  }else{
    var templateConfig = getConfig(pathTemplateCfg+"default.json");
  }
  writeTemplate(templateConfig);
}



function writeTemplate(config){

  var text = "'use strict';\n\n"+
             "import \"../main.css\";\n"+
             "import {renderLayout} from '../kp';\n\n";

  config.modules.forEach(function(mod){
    text += "import " + mod.class + " from '../modules/"+mod.name+"';\n";
  });

    text += "\nimport mainleyout from '../layouts/" + config.templateFile+ "';\n\n";


    text += "\nmodule.exports = function(){\n\n";

    text += "renderLayout('" + config.name + "', mainleyout);\n\n"

    config.modules.forEach(function(mod){
      if (!mod.options){
        if (!mod.dataFile){
          text += "  let " + mod.name +  " = new " + mod.class + "().render();\n";
        }else{
          text += "  let " + mod.name + "Data = require(\"../modules/" + mod.name + "/" + mod.dataFile + "\");\n";
          text += "  let " + mod.name +  " = new " + mod.class + "("+ mod.name + "Data).render();\n";
        }


      }else{
        text += "  let " + mod.name +  " = new " + mod.class + "({\n";

        for (key in mod.options) {
          text += "    "+key + " : " + "\""+mod.options[key]+"\",\n";
        }
        text +="  }).render();\n";
      }
    });

    text += "\n};"


  try{
    fs.writeFile(pathToJsFile, text, "utf8", console.log('файл шаблона заполнен'));
  }catch(e){
    console.error(e);
  }
}

///lib

function fileCreated() {
  console.log('файл создан');
  return true;
}

function fileExist(filePath) {

  try{
    fs.accessSync(filePath, fs.F_OK);
    return true;
  }
  catch (e){
    console.error( "Файл " + filePath + " не доступен");
    return false;
  }
}

function setFilePath() {
  pathToJsFile = pathLayout+pageName+".js";
}

function getConfig(filePath) {

  if (fileExist(filePath)){
    try{
      var file = fs.readFileSync(filePath, "utf8");
      return JSON.parse(file);
    }
    catch(e){
      console.log("Нет файла или неудалось прочитать: " + filePath);
      console.error(e);
    }
  }else{
    console.error("Не найден файл конфиг шаблона:" + filePath)
    return false;
  }

}
